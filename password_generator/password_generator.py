from random import choice


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
def checking_number(num):
    while True:
        if num.isdigit() and int(num) > 0:
            return int(num)
        else:
            num = input('–û—à–∏–±–∫–∞: –í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è! ')


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–∞/–Ω–µ—Ç)
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –¥–ª—è '–¥–∞', False –¥–ª—è '–Ω–µ—Ç'
def checking_response(response):
    while True:
        if response.lower() == '–¥–∞':
            return True
        elif response.lower() == '–Ω–µ—Ç':
            return False
        else:
            response = input('–û—à–∏–±–∫–∞: –í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. –í–≤–µ–¥–∏—Ç–µ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç"! ')


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è
# –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –≤–∫–ª—é—á–∏—Ç—å –∏ –∏—Å–∫–ª—é—á–∏—Ç—å
def build_charset():
    digits = '0123456789'
    lowercase_letters = 'abcdefghijklmnopqrstuvwxyz'
    uppercase_letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    punctuation = '!#$%&*+-=?@^_'
    chars = ''

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –≤–∫–ª—é—á–∏—Ç—å
    included_numbers = checking_response(input('–í–∫–ª—é—á–∞—Ç—å –ª–∏ —Ü–∏—Ñ—Ä—ã 0123456789? (–¥–∞/–Ω–µ—Ç) '))
    included_uppercase_let = checking_response(input('–í–∫–ª—é—á–∞—Ç—å –ª–∏ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ –±—É–∫–≤—ã ABCDEFGHIJKLMNOPQRSTUVWXYZ? (–¥–∞/–Ω–µ—Ç) '))
    included_lowercase_let = checking_response(input('–í–∫–ª—é—á–∞—Ç—å –ª–∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã abcdefghijklmnopqrstuvwxyz? (–¥–∞/–Ω–µ—Ç) '))
    included_chars = checking_response(input('–í–∫–ª—é—á–∞—Ç—å –ª–∏ —Å–∏–º–≤–æ–ª—ã !#$%&*+-=?@^_ ? (–¥–∞/–Ω–µ—Ç) '))
    excluded_chars = checking_response(input('–ò—Å–∫–ª—é—á–∞—Ç—å –ª–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã il1Lo0O? (–¥–∞/–Ω–µ—Ç) '))

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    if included_numbers:
        chars += digits
    if included_uppercase_let:
        chars += uppercase_letters
    if included_lowercase_let:
        chars += lowercase_letters
    if included_chars:
        chars += punctuation
    # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    if excluded_chars:
        for char in 'il1Lo0O':
            chars = chars.replace(char, '')

    return chars


# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π
def password_generation(quantity, chars):
    passwords = []

    # –ï—Å–ª–∏ –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –ø—É—Å—Ç–æ–π, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if not chars:
        print("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.")
        return []

    password_length = checking_number(input('–ö–∞–∫–∞—è –±—É–¥–µ—Ç –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è? '))

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–æ–ª—è
    for i in range(1, quantity + 1):
        password = ''
        for _ in range(password_length):
            password += choice(chars)
        passwords.append(password)
    
    print()
    return passwords


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
def play():
    print('–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø–æ —Ç–≤–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º')
    while True:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤—ã–≤–æ–¥ –ø–∞—Ä–æ–ª–µ–π
        quantity = checking_number(input('–°–∫–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª–µ–π –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å? '))
        passwords = password_generation(quantity, build_charset())
        print('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏:', *passwords, sep='\n')
        print()
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑
        replay = input('–ñ–µ–ª–∞–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏ –µ—â–µ —Ä–∞–∑? ')
        if not checking_response(replay):
            print('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ!')
            break


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
play()
